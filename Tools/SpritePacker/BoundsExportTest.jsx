var originalUnits = Units.PIXELS;var logFile = null;var mainDocument = app.activeDocument;var documentName = mainDocument.name;var documentWidth = mainDocument.width.as("px");var documentHeight = mainDocument.height.as("px"); function initPlugin(){	originalUnits = preferences.rulerUnits 	preferences.rulerUnits = Units.PIXELS		var dir = new Folder("/Sources/Export");	if (!dir.create())	{		alert("Cannot create directory /Sources/Export");		}	dir = null;	logFile = File("/Sources/Export/export.txt")	logFile.open("w")	logFile.write ("// Photoshop export plugin\n");	logFile.write ("Input File:" + documentName + "\n");		logFile.write("Dimentions: (" + documentWidth + " x " + documentHeight + ")\n"); }function finishPlugin(){	preferences.rulerUnits = originalUnits	logFile.close()	logFile= null}function writeLog(str){	logFile.write(str);}function replaceExtension(str, ext){	var n = str.indexOf(".", 0);	return str.substr(0, n) + ext;}function saveSelectionToPng(bounds, fileName){	var saveDoc = app.documents.add(bounds[2] - bounds[0], bounds[3] - bounds[1]);	var newLayerInNewDocument = saveDoc.artLayers.add();	saveDoc.paste();			outFile = new File(fileName) 	outFile.remove()	deviceSaveOptions = new ExportOptionsSaveForWeb() 	deviceSaveOptions.format = SaveDocumentType.PNG;	deviceSaveOptions.PNG8 = false;	deviceSaveOptions.quality = 100;	saveDoc.exportDocument (outFile, ExportType.SAVEFORWEB, deviceSaveOptions);			saveDoc.close(SaveOptions.DONOTSAVECHANGES);	app.activeDocument = mainDocument;}function Size(dx, dy){	this.dx = dx;	this.dy = dy;}function Rect(x, y, dx, dy){	this.x = x	this.y = y	this.dx = dx	this.dy = dy}function ImagePackerNode(){	this.isLeaf = true;	this.child0 = null;	this.child1 = null;	this.isImageSet = false;	this.rect = new Rect(0, 0, 0, 0)	this.frameIndex = -1	this.Insert = function (imageSize)	{		with(this)		{					if (!isLeaf)		{			var newNode = child0.Insert(imageSize, frameIndex);			if (newNode)			{				return newNode;			}			var newNode = child1.Insert(imageSize, frameIndex);			if (newNode)			{				return newNode;			}		}else		{			if (isImageSet)return 0;			if ((imageSize.dx > rect.dx)||(imageSize.dy > rect.dy))			{				return null;			}			if ((imageSize.dx == rect.dx)&&(imageSize.dy == rect.dy))			{				isImageSet = true;				return this;			}					isLeaf = false;			child0 = new ImagePackerNode()			child1 = new ImagePackerNode()			var dw = rect.dx - imageSize.dx;			var dh = rect.dy - imageSize.dy;			if (dw > dh)			{				child0.rect = new Rect(	rect.x, rect.y, 	imageSize.dx, rect.dy);				child1.rect = new Rect(	rect.x + imageSize.dx, rect.y, rect.dx - imageSize.dx, rect.dy);			}else			{				child0.rect = new Rect(	rect.x, rect.y, rect.dx, imageSize.dy);				child1.rect = new Rect(	rect.x, rect.y + imageSize.dy, rect.dx, rect.dy - imageSize.dy);			}			var newNode = child0.Insert(imageSize, frameIndex);			if (newNode)			{				return newNode;			}		}		}	}	this.RectForFrameIndex = function (frameIndex)	{		if (this.frameIndex == frameIndex)return this.rect;		else		{			if (this.child0 != null)			{				var r1 = this.child0.RectForFrameIndex(frameIndex);				if (r1)return r1;			}			if (this.child1 != null)			{				var r2 = this.child1.RectForFrameIndex(frameIndex);				if (r2)return r2;			}			return null;		}	}}function Log2(value){	result = 1;	while(result < value) result *= 2;	return result;}// Plugin codeinitPlugin();var artLayers = mainDocument.artLayers;writeLog("Number of frames:" + artLayers.length + "\n" ); for (i = artLayers.length - 1; i >= 0; --i){	var layer = artLayers[i];	writeLog("Art layer:" + layer.name + " " + layer.kind + "\n");	mainDocument.activeLayer = layer		var pathItems = mainDocument.pathItems;	if (pathItems.length != 0)	{		writeLog("Found associated path:" + pathItems.length + "\n");		/*for (k = pathItems.length - 1; k >= 0; --k)		{			var pathItem = pathItems[k];			writeLog("Path item:" + pathItem.name + " len: " + pathItem.subPathItems.length + "\n");		}*/	}}finishPlugin();