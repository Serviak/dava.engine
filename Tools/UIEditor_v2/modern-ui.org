#+TITLE:        Интерфейсы+
#+LANGUAGE:     ru
#+OPTIONS:      H:3 num:2 toc:2 tags:nil
#+LATEX_CLASS:  article
#+LATEX_HEADER: \usepackage[russian]{babel}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{subfigure}

* Введение

  Сложность наших интерфейсов увелчилась и мы столкнулись с
  проблемами, которые с усложнением интерфейса все настойчевее о себе
  напоминают.

  Проблемы:
  - Много одинаковых расскопированных контнолов как по всему проекту
    (например, стандартные кнопки), так и в пределах экрана (например,
    кнопки фильтров, наций), которые переодически приходится менять,
    перелопачивая весь интерфейс.
    
  - Сложные составные интерфейсы. Сейчас они или делятся на файлы,
    которые теряются среди кучи тругих файлов или создаются в одной
    сложной иерархии контролов, создающие сложности при редактировании
    и понимании.
    
  - Есть проблемы в управлении свойств похожих контролов. Например,
    нет возможности подменить некоторые свойства для всех заданных
    контролов в интерфейсе айфона.

  - Анимации интерфейсов задаются сложным однотипным кодом
    программистами под руководством художника или гейм-дизайнера. При
    этом для просмотра редактируемой анимации зачастую приходится
    включать проект и отыскивать необходимое место, что не всегда
    просто сделать.

  - Для некоторых случаев распологать контролы становится очень
    неудобно, например расставляя кнопки в фильтре приходилось
    пользоваться калькулятором для подсчета расположения, которое
    можно было бы считать в процессе редактирования или запуска
    приложения.


  Предлагаемые способы решения:
  - Прототипы - возможность взять существующий контрол для создания
    нового с последующей его настройкой. Позволят уменьшить
    копирование, компановку интерфейса из мелких частей.
  
  - Стили - способ отделения свойств от контролов, выделение их в
    отдельные группы или файлы с возможностью их подеменения для
    разных типов экранов или для разных состояний контрола (при
    нажатии кнопки).

  - Анимации - добавить редактирование анимаций в редактор, чтобы
    процесс был наиболее наглядным и мог быть выполнен
    хужожником-аниматором самостоятельно.

  - Система автоматической расстановки элементов интерфейса - для
    случаев, когда это необходимо создать предопределенные правила
    расположения элементов. К примеру, выравнивание по центру или
    краям, расположение элементво на равном расстоянии друг от друга.
    
* Часть 1. Реализация прототипов

   Еще раз. Прототип это способ создания контрола на остнове уже
   существующего со всеми дочерними контролами. 

   Прототипы решают следующие проблемы:
   - избавляют от копирования при создании похожих элементов, таких
     как кнопки, диалоги, стандартные оконные рамки и пр.
   - позволяют разделить сложные элементы управления на состовные
     части
     
** Простейшая реализация

   Для реализации нам надо склонировать контрол и заменить необходимые
   нам свойства, по желанию можно добавить дочерние элементы
   управления.

   В yaml-файле это может принимать следующий вид.

#+BEGIN_SRC js
   Controls: 
     - name: "buttonPrototype"
       class: "UIButton"
       size: [100, 25]
       components:
           Normal:
               sprite: "~res:/Gfx/UI/Hangar/PlayButton"
               frame: 0
               spriteModification: 0
           PressedInside:
               color: [1.0000, 1.0000, 1.0000, 0.5020]
       ...


     - name: "okButton"
       prototype: "buttonPrototype"
       position: [0, 100]
       text: "Ok"

     - name: "cancelButton"
       prototype: "buttonPrototype"
       position: [100, 100]
       text: "Cancel"

#+END_SRC

** Формат файла

   Текущий ямл файл хранит только дочерние элементы одного
   контрола. Причем предполагается что сам файл представляет один
   экран или один агрегатор без информации о размере, имени и прочее.

   Предлагаем использовать понятие пакета. Пакет это файл, который
   хранит несколько контролов. При загрузке в память пакет - это
   коллекция, где по имени можно получить любой контрол. 

#+BEGIN_SRC js
   Header:
       version: "0"
   
   ImportedPackages:
       - "Common/Buttons.yaml"
       - "Common/Dialogs.yaml"
       - "Common/HangarHeader.yaml"
   
   Controls:
     - name: "header"
       class: "UIControl"
       backgrounds:
         - name: "Normal"
           type: "Aligned"
           align: "left|top"
       children:
         - class: "UIControl"
           name: "title"
         - class: "UIControl"
           name: "title"
           background:
               type: "" 
   
     - name: "test"
       children:
         - name: "testPr"
           prototype: "header"
           children:
             - path: "label" # path from root to header
               title: "Hello world"
               color: "red"
               children:
                 - name: "btn"
                   class: "UIButton"
   
#+END_SRC   

   Файл состоит из нескольких секций:
   - Заголовок с версией для возможности миграции на следующие версии
     формата
   - Секцией со списоком пакетов из которых будут импортироваться
     прототипы
   - Секция со списком контролов.
   
   Прототипом может служить любой контрол, который встречается в
   пакете перед загружаемым или любой контрол находящийся в
   импортированных пакетах.

   Для контрола созданного из основе прототипа можно будет изменять
   свойства и добавлять дочерние элементы в любое место иерархии.

   Возможно будет иметь смысл создать систему псевдонимов, которые
   будут давать имена к некоторым путям прототипов, что даст некоторую
   свободу в редактировании прототипов не влияя на те интерфейсы,
   которые их используют.

** Для программистов
   UIPackage - Список загруженных контролов, здесь так же есть список
   импортированных пакетов. Импортированные пакеты будут кэшироваться,
   чтобы, к примеру, общая библиотека контролов не копировалась для
   каждого использования.

   UIPackageLoader - реализация загрузки и сохранения пакетов. Именно
   загрузчик знает про прототипы, на выходе он отдает обычный пакет,
   где контролы уже не знают были ли они сконструированны на основе
   прототипов или были созданы с нуля.
   
   EditorUIPackageLoader - расширяет UIPackageLoader, существует на
   стороне редактора интерфейсов и при построении элементов управления
   добавляет метаинформацию, которая позволяет корректно работать с
   прототипами в редакторе.

   UIEditorComponent - на уровне фреймворка и игры это обычный
   указатель на BaseObject, который живет в каждом контроле в поле
   customData и всегда равен нулю. В редакторе это указатель на класс
   UIEditorComponent, который хранит всю необходимую для работы с
   прототипами и свойствами контрола информацию.

   
** Свойства прототипов

   Для управления прототипами нужен более унифицированный подход для
   работы со свойствами контролов. Свойства доступные для
   редактирования и сохранения будут заданы через интроспекцию.
   
   Свойства задаются для контролов а так же для баэкграунда
   контрола. Бэкграундов может быть несколько, например для кнопки.  В
   последстии было бы неплохо привести бэкграунды к компонентам.

** Изменения редактора
   
   В редакторе чтобы не перегружать иерархию контролов, будет
   разделено дерево файлов, и дерево загруженных пакетов. Из дерева
   файлов будет убрана информация об агрегатах, платформах. Эта
   информация не используется в игровых проектах. В редакторе она тоже
   не нужна. Каждый контрол можно будет использовать как прототип
   другого. Структуру файлов для проекта будет организовывать проект
   удобным для себя образом.

   Создание контролов будет изменено для UIEditor. В редакторе
   необходима другой способ создания элементов управления. Поэтому
   предлагается использование фабрики элементов.


** Данные редактора
   Каждый контрол будет иметь указатель UIEditorComponent, который для
   игры останется просто каким-то указателем, а в редакторе будет
   реализован класс, который будет хранить служебную информацию. В
   дальшейшем предлагается работу с этим компонентов унифицировать
   вместе с другими компонентами.

** Другое   

  Для начала чуть-чуть упростим работу с файлами/контролами. Выкинем
  нафиг из редактора знания об экранах, платформах и прочее. Это все
  легко можно настроить при работе над проектом.

  Редактор станет чуть больше похож на идешку. Т.е. отдельно иерархия
  файлов с элементами интерфейсов и отдельно содержимое
  файла. Содержимое файла будет хранить несколько контролов. Причем
  некоторые контролы буду 

* Дополнительные улучшения в коде
  - Дети контрола будут храниться в векторе а не списке
  - UIControlBackground будет необязательным


