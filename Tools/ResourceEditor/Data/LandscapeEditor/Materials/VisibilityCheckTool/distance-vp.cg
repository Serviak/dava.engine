#include "common.cgh"
#include "blending.cgh"

VPROG_IN_BEGIN
    VPROG_IN_POSITION        
    VPROG_IN_NORMAL
VPROG_IN_END

VPROG_OUT_BEGIN
    VPROG_OUT_POSITION
#if defined(ENCODE_DISTANCE)
    VPROG_OUT_TEXCOORD0(distanceToCamera,1)
#elif defined(DECODE_DISTANCE)
    VPROG_OUT_TEXCOORD1(directionFromPoint,3)
#elif defined(REPROJECTION)
	VPROG_OUT_TEXCOORD1(reprojectedCoords,4)
    VPROG_OUT_TEXCOORD2(distanceToOrigin,1)
    VPROG_OUT_TEXCOORD4(viewportCoords,4)
#endif

VPROG_OUT_END

property float4x4 worldViewProjMatrix : dynamic,a : ;
property float4x4 worldMatrix : dynamic,a : ;
property float4x4 viewProjMatrix : dynamic,a : ;
property float3 cameraPosition : dynamic,a : ;

#if defined(DECODE_DISTANCE)
property float3 origin : static,a : ;
#elif defined(REPROJECTION)
property float4x4 fixedFrameMatrix : static,a : ;
property float3 origin : static,a : ;
#endif

VPROG_BEGIN

	float4 pos = float4(VP_IN_POSITION.xyz, 1.0);
	float4 worldPosition = mul(pos, worldMatrix);

#if defined(ENCODE_DISTANCE)
	VP_OUT(distanceToCamera) = length(worldPosition.xyz - cameraPosition);
#elif defined(DECODE_DISTANCE)
	VP_OUT(directionFromPoint) = worldPosition.xyz - origin;
#elif defined(REPROJECTION)
	VP_OUT(reprojectedCoords) = mul(worldPosition, fixedFrameMatrix);
	VP_OUT(distanceToOrigin) = length(worldPosition.xyz - origin);
#endif

	VP_OUT_POSITION = mul(pos, worldViewProjMatrix);

#if defined(REPROJECTION)
	VP_OUT(viewportCoords) = VP_OUT_POSITION;
#endif

VPROG_END