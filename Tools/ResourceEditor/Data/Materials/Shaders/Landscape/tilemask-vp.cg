#include "common.cgh"

#if USE_INSTANCING

	VPROG_IN_BEGIN
		VPROG_IN_STREAM_VERTEX
			VPROG_IN_TEXCOORD0(4)
			VPROG_IN_TEXCOORD1(4)
		VPROG_IN_STREAM_INSTANCE
			VPROG_IN_TEXCOORD4(4)
			VPROG_IN_TEXCOORD5(4)
	VPROG_IN_END
	
#else
	
	VPROG_IN_BEGIN
		VPROG_IN_POSITION
		VPROG_IN_TEXCOORD
	VPROG_IN_END
	
#endif

VPROG_OUT_BEGIN
    
    VPROG_OUT_POSITION
    VPROG_OUT_TEXCOORD0(texCoord,2)
    #if TILEMASK
        VPROG_OUT_TEXCOORD1(texCoordTiled,2)
    #endif

    #if VERTEX_FOG
        VPROG_OUT_TEXCOORD5(varFog,4)
    #endif

VPROG_OUT_END

#if USE_INSTANCING
	DECL_VP_SAMPLER2D(heightmap)
#endif

property float4x4 worldViewProjMatrix          : dynamic,a : ;

#if USE_INSTANCING
	property float3 boundingBoxSize 		   : dynamic,a : ;
#endif

#if TILEMASK
    property float2   textureTiling 		   : static,instance : def_value=50,50;
#endif

#if VERTEX_FOG
property float4x4 worldMatrix                  : dynamic,a : ;
property float4x4 worldViewMatrix              : dynamic,a : ;
property float3   cameraPosition               : dynamic,a : ;
#endif
#if VERTEX_FOG && FOG_ATMOSPHERE
property float4   lightPosition0               : dynamic,a : ;
#endif

#include "vp-fog-props.cgh"

#ifndef PATCH_SIZE_QUADS
	#define PATCH_SIZE_QUADS 16
#endif

VPROG_BEGIN

#if USE_INSTANCING

    float2 in_pos = VP_IN_TEXCOORD0.xy;
    float2 gluDir = VP_IN_TEXCOORD0.zw;
    float4 edgeMask = VP_IN_TEXCOORD1;
    float3 patchOffsetScale = VP_IN_TEXCOORD4.xyz;
    float4 lodOffset = VP_IN_TEXCOORD5;
	
    float gluAmount = dot(edgeMask, lodOffset);
	float2 pos_i = abs(gluDir - in_pos) * float(PATCH_SIZE_QUADS);
	float i = dot(pos_i, abs(gluDir));
	float f = fmod(i, gluAmount);
	in_pos += gluDir * f / float(PATCH_SIZE_QUADS);
   
    float2 relativePosition = patchOffsetScale.xy + in_pos.xy * patchOffsetScale.z; //[0, 1]
	
#if LOD_MORPHING

	float lodMorph = VP_IN_TEXCOORD4.w;
	float baseLod = floor(lodMorph);
	float morphAmount = lodMorph - baseLod;
	
    float4 heightmapSample0 = VP_TEXTURE2D(heightmap, relativePosition, baseLod);
	float4 heightmapSample1 = VP_TEXTURE2D(heightmap, relativePosition, baseLod + 1.0);
	float4 heightmapSample = lerp(heightmapSample0, heightmapSample1, morphAmount);
	
#else
	
	float4 heightmapSample = VP_TEXTURE2D(heightmap, relativePosition, 0.0);
	
#endif

	float relativeHeight = dot(heightmapSample, float4(0.00022888532845, 0.00366216525521, 0.05859464408331, 0.93751430533303));
    float3 vx_position = float3( relativePosition - 0.5, relativeHeight ) * boundingBoxSize;
	
    VP_OUT_POSITION = mul( float4(vx_position.x, vx_position.y, vx_position.z, 1.0), worldViewProjMatrix );
    VP_OUT(texCoord) = float2(relativePosition.x, 1.0 - relativePosition.y);
	 
#else
	
	float3 vx_position = VP_IN_POSITION.xyz;
    
    VP_OUT_POSITION = mul( float4(vx_position.x, vx_position.y, vx_position.z, 1.0), worldViewProjMatrix );
	VP_OUT(texCoord) = VP_IN_TEXCOORD;
	
#endif
	
#if TILEMASK
    VP_OUT(texCoordTiled) = VP_OUT(texCoord) * textureTiling.xy;
#endif
	
#if VERTEX_FOG
	
	float3 view_position = mul( float4(vx_position.xyz,1.0), worldViewMatrix ).xyz;
	#define FOG_view_position view_position
	
#if FOG_ATMOSPHERE
	float3 tolight_dir = lightPosition0.xyz - view_position * lightPosition0.w;
    #define FOG_to_light_dir tolight_dir
#endif
	
#if FOG_HALFSPACE || FOG_ATMOSPHERE_MAP
	float3 world_position = mul( float4(vx_position.xyz,1.0), worldMatrix ).xyz;
	#define FOG_world_position world_position
#endif

    #define FOG_eye_position cameraPosition

	#include "vp-fog-math.cgh" // in{ float3 FOG_view_position, float3 FOG_eye_position, float3 FOG_to_light_dir, float3 FOG_world_position }; out{ float4 FOG_result };
	
	VP_OUT(varFog) = FOG_result;
	
#endif
    
VPROG_END
