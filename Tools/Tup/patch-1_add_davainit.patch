diff --git a/src/tup/luaparser.c b/src/tup/luaparser.c
index 8d8de83..d03fef8 100644
--- a/src/tup/luaparser.c
+++ b/src/tup/luaparser.c
@@ -156,6 +156,66 @@ static int tuplua_function_include(lua_State *ls)
 	return 0;
 }
 
+static int tuplua_function_initdava(lua_State *ls)
+{
+	struct tupfile *tf = lua_touserdata(ls, lua_upvalueindex(1));
+	char *file = NULL;
+	int old_dfd = tf->cur_dfd;
+	int rc = -1;
+
+	file = tuplua_strdup(ls, -1);
+	lua_pop(ls, 1);
+	assert(lua_gettop(ls) == 0);
+	if(file == NULL)
+		return luaL_error(ls, "Must be passed a filename as an argument.");
+
+	tf->ls = ls;
+
+	int fd = openat(tf->cur_dfd, file, O_RDONLY);
+	if(fd < 0) {
+		fprintf(tf->f, "tup error: Failed to open file '%s' relative curdir\n", file);
+		goto dv_out;
+	}
+
+	struct buf b;
+	if(fslurp_null(fd, &b) < 0) {
+		goto dv_outclose;
+	}
+
+	lua_pushstring(ls, file);
+	lua_setglobal(ls, "davapath");
+
+	if(parse_lua_tupfile(tf, &b, file) < 0) {
+		if (tf->luaerror == TUPLUA_NOERROR) {
+			luaL_where(ls, 1);
+			lua_pushfstring(ls, "Failed to include file '%s'.", file);
+			lua_concat(ls, 2);
+			tf->luaerror = TUPLUA_PENDINGERROR;
+			lua_error(ls);
+			goto dv_outfree;
+		}
+	}
+
+	rc = 0;
+
+dv_outfree:
+	free(b.s);
+
+dv_outclose:
+	close(fd);
+
+dv_out:
+	free(file);
+	tf->cur_dfd = old_dfd;
+
+	if(rc < 0) {
+		fprintf(tf->f, "tup error: Failed to parse included file '%s'\n", file);
+		return -1;
+	}
+
+	return 0;
+}
+
 static int tuplua_table_to_path_list(lua_State *ls, const char *table, struct tupfile *tf, struct path_list_head *plist, int allow_nodes)
 {
 	lua_getfield(ls, 1, table);
@@ -741,6 +801,7 @@ int parse_lua_tupfile(struct tupfile *tf, struct buf *b, const char *name)
 		/* Register tup interaction functions in the "tup" table in Lua */
 		lua_newtable(ls);
 		tuplua_register_function(ls, "include", tuplua_function_include, tf);
+		tuplua_register_function(ls, "initdava", tuplua_function_initdava, tf);
 		tuplua_register_function(ls, "definerule", tuplua_function_definerule, tf);
 		tuplua_register_function(ls, "append_table", tuplua_function_append_table, tf);
 		tuplua_register_function(ls, "getcwd", tuplua_function_getcwd, tf);
